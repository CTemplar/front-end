/*
** @partial: _utilities.scss
*/

/* Build mixin for form element's placeholders */
@mixin placeholder($selector, $color, $font-size, $font-family, $case, $font-style) {
  #{$selector}::-webkit-input-placeholder {
    color: $color;
    font-size: $font-size;
    font-family: $font-family;
    font-style: $font-style;
    text-transform: $case;
  }
  #{$selector}::-moz-placeholder {
    color: $color;
    font-size: $font-size;
    font-family: $font-family;
    font-style: $font-style;
    text-transform: $case;
  }
  #{$selector}:-ms-input-placeholder {
    color: $color;
    font-size: $font-size;
    font-family: $font-family;
    font-style: $font-style;
    text-transform: $case;
  }
  #{$selector}:-moz-placeholder {
    color: $color;
    font-size: $font-size;
    font-family: $font-family;
    font-style: $font-style;
    text-transform: $case;
  }
}

/* Make mixin for background image properties */
@mixin make-bkg-image($repeat: no-repeat, $position: center center, $size: cover) {
  background: {
    repeat: $repeat !important;
    position: $position !important;
    size: $size !important;
  };
  @content;
}

/* Build mixin for selection feature */
$prefixes: ("-moz-", "");
@mixin selection($bkg: $brand-primary, $color: $brand-white) {
  @each $prefix in $prefixes {
    ::#{$prefix}selection {
      background: $bkg;
      color: $color;
    }
  }
}

// == Mixin to make font families
@mixin make_font_families($list, $val) {
	// Counter initializes to 1
	$i: 1;

	// Looping each item through each loop
	@each $l in $list {
		// Catch each item in list passed as first argument
		.ff-#{$l} {
			font-family: nth($val, $i);
		}

		// Incrementing counter
		$i: $i + 1;

		// Below line of statement allows to append code later where the mixin is executed
		@content;
	} 
}

// == Mixin to make btn-link
@mixin make_btn_link($list, $val) {
  // Counter initializes to 1
  $i: 1;

  // Looping each item through each loop
  @each $l in $list {
    // Catch each item in list passed as first argument
    .btn-link-#{$l} {
      color: nth($val, $i);

      &:hover {
        color: darken(nth($val, $i), 5%);
      }
    }

    // Incrementing counter
    $i: $i + 1;

    // Below line of statement allows to append code later where the mixin is executed
    @content;
  }
}